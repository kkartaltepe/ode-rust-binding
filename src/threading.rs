/* automatically generated by rust-bindgen */

use odeconfig::*;

pub enum Struct_dxThreadingImplementation { }
pub type dThreadingImplementationID = *mut Struct_dxThreadingImplementation;
pub type dmutexindex_t = ::libc::c_uint;
pub enum Struct_dxMutexGroup { }
pub type dMutexGroupID = *mut Struct_dxMutexGroup;
pub type dMutexGroupAllocFunction =
    extern "C" fn(_impl: dThreadingImplementationID,
                  Mutex_count: dmutexindex_t,
                  Mutex_names_ptr: *const *const ::libc::c_char)
        -> dMutexGroupID;
pub type dMutexGroupFreeFunction =
    extern "C" fn(_impl: dThreadingImplementationID,
                  mutex_group: dMutexGroupID) -> ();
pub type dMutexGroupMutexLockFunction =
    extern "C" fn(_impl: dThreadingImplementationID,
                  mutex_group: dMutexGroupID, mutex_index: dmutexindex_t)
        -> ();
pub type dMutexGroupMutexUnlockFunction =
    extern "C" fn(_impl: dThreadingImplementationID,
                  mutex_group: dMutexGroupID, mutex_index: dmutexindex_t)
        -> ();
pub enum Struct_dxCallReleasee { }
pub type dCallReleaseeID = *mut Struct_dxCallReleasee;
pub enum Struct_dxCallWait { }
pub type dCallWaitID = *mut Struct_dxCallWait;
pub type ddependencycount_t = size_t;
pub type ddependencychange_t = ptrdiff_t;
pub type dcallindex_t = size_t;
pub type dThreadedCallFunction =
    extern "C" fn(call_context: *mut ::libc::c_void,
                  instance_index: dcallindex_t,
                  this_releasee: dCallReleaseeID) -> ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dxThreadedWaitTime {
    pub wait_sec: time_t,
    pub wait_nsec: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct_dxThreadedWaitTime {
    fn clone(&self) -> Struct_dxThreadedWaitTime { *self }
}
impl ::std::default::Default for Struct_dxThreadedWaitTime {
    fn default() -> Struct_dxThreadedWaitTime {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type dThreadedWaitTime = Struct_dxThreadedWaitTime;
pub type dThreadedCallWaitAllocFunction =
    extern "C" fn(_impl: dThreadingImplementationID) -> dCallWaitID;
pub type dThreadedCallWaitResetFunction =
    extern "C" fn(_impl: dThreadingImplementationID, call_wait: dCallWaitID)
        -> ();
pub type dThreadedCallWaitFreeFunction =
    extern "C" fn(_impl: dThreadingImplementationID, call_wait: dCallWaitID)
        -> ();
pub type dThreadedCallPostFunction =
    extern "C" fn(_impl: dThreadingImplementationID,
                  out_summary_fault: *mut ::libc::c_int,
                  out_post_releasee: *mut dCallReleaseeID,
                  dependencies_count: ddependencycount_t,
                  dependent_releasee: dCallReleaseeID, call_wait: dCallWaitID,
                  call_func:
                      *mut ::std::option::Option<extern "C" fn()
                                                     -> ::libc::c_int>,
                  call_context: *mut ::libc::c_void,
                  instance_index: dcallindex_t,
                  call_name: *const ::libc::c_char) -> ();
pub type dThreadedCallDependenciesCountAlterFunction =
    extern "C" fn(_impl: dThreadingImplementationID,
                  target_releasee: dCallReleaseeID,
                  dependencies_count_change: ddependencychange_t) -> ();
pub type dThreadedCallWaitFunction =
    extern "C" fn(_impl: dThreadingImplementationID,
                  out_wait_status: *mut ::libc::c_int, call_wait: dCallWaitID,
                  timeout_time_ptr: *const dThreadedWaitTime,
                  wait_name: *const ::libc::c_char) -> ();
pub type dThreadingImplThreadCountRetrieveFunction =
    extern "C" fn(_impl: dThreadingImplementationID) -> ::libc::c_uint;
pub type dThreadingImplResourcesForCallsPreallocateFunction =
    extern "C" fn(_impl: dThreadingImplementationID,
                  max_simultaneous_calls_estimate: ddependencycount_t)
        -> ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dxThreadingFunctionsInfo {
    pub struct_size: ::libc::c_uint,
    pub alloc_mutex_group: *mut ::std::option::Option<extern "C" fn()
                                                          -> dMutexGroupID>,
    pub free_mutex_group: *mut ::std::option::Option<extern "C" fn() -> ()>,
    pub lock_group_mutex: *mut ::std::option::Option<extern "C" fn() -> ()>,
    pub unlock_group_mutex: *mut ::std::option::Option<extern "C" fn() -> ()>,
    pub alloc_call_wait: *mut ::std::option::Option<extern "C" fn()
                                                        -> dCallWaitID>,
    pub reset_call_wait: *mut ::std::option::Option<extern "C" fn() -> ()>,
    pub free_call_wait: *mut ::std::option::Option<extern "C" fn() -> ()>,
    pub post_call: *mut ::std::option::Option<extern "C" fn() -> ()>,
    pub alter_call_dependencies_count: *mut ::std::option::Option<extern "C" fn()
                                                                      -> ()>,
    pub wait_call: *mut ::std::option::Option<extern "C" fn() -> ()>,
    pub retrieve_thread_count: *mut ::std::option::Option<extern "C" fn()
                                                              ->
                                                                  ::libc::c_uint>,
    pub preallocate_resources_for_calls: *mut ::std::option::Option<extern "C" fn()
                                                                        ->
                                                                            ::libc::c_int>,
}
impl ::std::clone::Clone for Struct_dxThreadingFunctionsInfo {
    fn clone(&self) -> Struct_dxThreadingFunctionsInfo { *self }
}
impl ::std::default::Default for Struct_dxThreadingFunctionsInfo {
    fn default() -> Struct_dxThreadingFunctionsInfo {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type dThreadingFunctionsInfo = Struct_dxThreadingFunctionsInfo;
