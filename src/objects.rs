/* automatically generated by rust-bindgen */

use common::*;
use mass::*;
use contact::*;
use threading::*;

#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub struct_size: ::libc::c_uint,
    pub reserve_factor: ::libc::c_float,
    pub reserve_minimum: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Struct_Unnamed1 { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Struct_Unnamed1 { unsafe { ::std::mem::zeroed() } }
}
pub type dWorldStepReserveInfo = Struct_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub struct_size: ::libc::c_uint,
    pub alloc_block: ::std::option::Option<extern "C" fn(block_size: size_t)
                                               -> *mut ::libc::c_void>,
    pub shrink_block: ::std::option::Option<extern "C" fn(block_pointer:
                                                              *mut ::libc::c_void,
                                                          block_current_size:
                                                              size_t,
                                                          block_smaller_size:
                                                              size_t)
                                                -> *mut ::libc::c_void>,
    pub free_block: ::std::option::Option<extern "C" fn(block_pointer:
                                                            *mut ::libc::c_void,
                                                        block_current_size:
                                                            size_t) -> ()>,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Struct_Unnamed2 { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Struct_Unnamed2 { unsafe { ::std::mem::zeroed() } }
}
pub type dWorldStepMemoryFunctionsInfo = Struct_Unnamed2;

#[link(name="ode")]
extern "C" {
    pub fn dWorldCreate() -> dWorldID;
    pub fn dWorldDestroy(world: dWorldID) -> ();
    pub fn dWorldSetGravity(arg1: dWorldID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dWorldGetGravity(arg1: dWorldID, gravity: dVector3) -> ();
    pub fn dWorldSetERP(arg1: dWorldID, erp: dReal) -> ();
    pub fn dWorldGetERP(arg1: dWorldID) -> dReal;
    pub fn dWorldSetCFM(arg1: dWorldID, cfm: dReal) -> ();
    pub fn dWorldGetCFM(arg1: dWorldID) -> dReal;
    pub fn dWorldSetStepIslandsProcessingMaxThreadCount(w: dWorldID,
                                                        count: ::libc::c_uint)
     -> ();
    pub fn dWorldGetStepIslandsProcessingMaxThreadCount(w: dWorldID)
     -> ::libc::c_uint;
    pub fn dWorldUseSharedWorkingMemory(w: dWorldID, from_world: dWorldID)
     -> ::libc::c_int;
    pub fn dWorldCleanupWorkingMemory(w: dWorldID) -> ();
    pub fn dWorldSetStepMemoryReservationPolicy(w: dWorldID,
                                                policyinfo:
                                                    *const dWorldStepReserveInfo)
     -> ::libc::c_int;
    pub fn dWorldSetStepMemoryManager(w: dWorldID,
                                      memfuncs:
                                          *const dWorldStepMemoryFunctionsInfo)
     -> ::libc::c_int;
    pub fn dWorldSetStepThreadingImplementation(w: dWorldID,
                                                functions_info:
                                                    *const dThreadingFunctionsInfo,
                                                threading_impl:
                                                    dThreadingImplementationID)
     -> ();
    pub fn dWorldStep(w: dWorldID, stepsize: dReal) -> ::libc::c_int;
    pub fn dWorldQuickStep(w: dWorldID, stepsize: dReal) -> ::libc::c_int;
    pub fn dWorldImpulseToForce(arg1: dWorldID, stepsize: dReal, ix: dReal,
                                iy: dReal, iz: dReal, force: dVector3) -> ();
    pub fn dWorldSetQuickStepNumIterations(arg1: dWorldID, num: ::libc::c_int)
     -> ();
    pub fn dWorldGetQuickStepNumIterations(arg1: dWorldID) -> ::libc::c_int;
    pub fn dWorldSetQuickStepW(arg1: dWorldID, over_relaxation: dReal) -> ();
    pub fn dWorldGetQuickStepW(arg1: dWorldID) -> dReal;
    pub fn dWorldSetContactMaxCorrectingVel(arg1: dWorldID, vel: dReal) -> ();
    pub fn dWorldGetContactMaxCorrectingVel(arg1: dWorldID) -> dReal;
    pub fn dWorldSetContactSurfaceLayer(arg1: dWorldID, depth: dReal) -> ();
    pub fn dWorldGetContactSurfaceLayer(arg1: dWorldID) -> dReal;
    pub fn dWorldGetAutoDisableLinearThreshold(arg1: dWorldID) -> dReal;
    pub fn dWorldSetAutoDisableLinearThreshold(arg1: dWorldID,
                                               linear_threshold: dReal) -> ();
    pub fn dWorldGetAutoDisableAngularThreshold(arg1: dWorldID) -> dReal;
    pub fn dWorldSetAutoDisableAngularThreshold(arg1: dWorldID,
                                                angular_threshold: dReal)
     -> ();
    pub fn dWorldGetAutoDisableLinearAverageThreshold(arg1: dWorldID)
     -> dReal;
    pub fn dWorldSetAutoDisableLinearAverageThreshold(arg1: dWorldID,
                                                      linear_average_threshold:
                                                          dReal) -> ();
    pub fn dWorldGetAutoDisableAngularAverageThreshold(arg1: dWorldID)
     -> dReal;
    pub fn dWorldSetAutoDisableAngularAverageThreshold(arg1: dWorldID,
                                                       angular_average_threshold:
                                                           dReal) -> ();
    pub fn dWorldGetAutoDisableAverageSamplesCount(arg1: dWorldID)
     -> ::libc::c_int;
    pub fn dWorldSetAutoDisableAverageSamplesCount(arg1: dWorldID,
                                                   average_samples_count:
                                                       ::libc::c_uint) -> ();
    pub fn dWorldGetAutoDisableSteps(arg1: dWorldID) -> ::libc::c_int;
    pub fn dWorldSetAutoDisableSteps(arg1: dWorldID, steps: ::libc::c_int)
     -> ();
    pub fn dWorldGetAutoDisableTime(arg1: dWorldID) -> dReal;
    pub fn dWorldSetAutoDisableTime(arg1: dWorldID, time: dReal) -> ();
    pub fn dWorldGetAutoDisableFlag(arg1: dWorldID) -> ::libc::c_int;
    pub fn dWorldSetAutoDisableFlag(arg1: dWorldID,
                                    do_auto_disable: ::libc::c_int) -> ();
    pub fn dWorldGetLinearDampingThreshold(w: dWorldID) -> dReal;
    pub fn dWorldSetLinearDampingThreshold(w: dWorldID, threshold: dReal)
     -> ();
    pub fn dWorldGetAngularDampingThreshold(w: dWorldID) -> dReal;
    pub fn dWorldSetAngularDampingThreshold(w: dWorldID, threshold: dReal)
     -> ();
    pub fn dWorldGetLinearDamping(w: dWorldID) -> dReal;
    pub fn dWorldSetLinearDamping(w: dWorldID, scale: dReal) -> ();
    pub fn dWorldGetAngularDamping(w: dWorldID) -> dReal;
    pub fn dWorldSetAngularDamping(w: dWorldID, scale: dReal) -> ();
    pub fn dWorldSetDamping(w: dWorldID, linear_scale: dReal,
                            angular_scale: dReal) -> ();
    pub fn dWorldGetMaxAngularSpeed(w: dWorldID) -> dReal;
    pub fn dWorldSetMaxAngularSpeed(w: dWorldID, max_speed: dReal) -> ();
    pub fn dBodyGetAutoDisableLinearThreshold(arg1: dBodyID) -> dReal;
    pub fn dBodySetAutoDisableLinearThreshold(arg1: dBodyID,
                                              linear_average_threshold: dReal)
     -> ();
    pub fn dBodyGetAutoDisableAngularThreshold(arg1: dBodyID) -> dReal;
    pub fn dBodySetAutoDisableAngularThreshold(arg1: dBodyID,
                                               angular_average_threshold:
                                                   dReal) -> ();
    pub fn dBodyGetAutoDisableAverageSamplesCount(arg1: dBodyID)
     -> ::libc::c_int;
    pub fn dBodySetAutoDisableAverageSamplesCount(arg1: dBodyID,
                                                  average_samples_count:
                                                      ::libc::c_uint) -> ();
    pub fn dBodyGetAutoDisableSteps(arg1: dBodyID) -> ::libc::c_int;
    pub fn dBodySetAutoDisableSteps(arg1: dBodyID, steps: ::libc::c_int)
     -> ();
    pub fn dBodyGetAutoDisableTime(arg1: dBodyID) -> dReal;
    pub fn dBodySetAutoDisableTime(arg1: dBodyID, time: dReal) -> ();
    pub fn dBodyGetAutoDisableFlag(arg1: dBodyID) -> ::libc::c_int;
    pub fn dBodySetAutoDisableFlag(arg1: dBodyID,
                                   do_auto_disable: ::libc::c_int) -> ();
    pub fn dBodySetAutoDisableDefaults(arg1: dBodyID) -> ();
    pub fn dBodyGetWorld(arg1: dBodyID) -> dWorldID;
    pub fn dBodyCreate(arg1: dWorldID) -> dBodyID;
    pub fn dBodyDestroy(arg1: dBodyID) -> ();
    pub fn dBodySetData(arg1: dBodyID, data: *mut ::libc::c_void) -> ();
    pub fn dBodyGetData(arg1: dBodyID) -> *mut ::libc::c_void;
    pub fn dBodySetPosition(arg1: dBodyID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dBodySetRotation(arg1: dBodyID, R: dMatrix3) -> ();
    pub fn dBodySetQuaternion(arg1: dBodyID, q: dQuaternion) -> ();
    pub fn dBodySetLinearVel(arg1: dBodyID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dBodySetAngularVel(arg1: dBodyID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dBodyGetPosition(arg1: dBodyID) -> *const dReal;
    pub fn dBodyCopyPosition(body: dBodyID, pos: dVector3) -> ();
    pub fn dBodyGetRotation(arg1: dBodyID) -> *const dReal;
    pub fn dBodyCopyRotation(arg1: dBodyID, R: dMatrix3) -> ();
    pub fn dBodyGetQuaternion(arg1: dBodyID) -> *const dReal;
    pub fn dBodyCopyQuaternion(body: dBodyID, quat: dQuaternion) -> ();
    pub fn dBodyGetLinearVel(arg1: dBodyID) -> *const dReal;
    pub fn dBodyGetAngularVel(arg1: dBodyID) -> *const dReal;
    pub fn dBodySetMass(arg1: dBodyID, mass: *const dMass) -> ();
    pub fn dBodyGetMass(arg1: dBodyID, mass: *mut dMass) -> ();
    pub fn dBodyAddForce(arg1: dBodyID, fx: dReal, fy: dReal, fz: dReal)
     -> ();
    pub fn dBodyAddTorque(arg1: dBodyID, fx: dReal, fy: dReal, fz: dReal)
     -> ();
    pub fn dBodyAddRelForce(arg1: dBodyID, fx: dReal, fy: dReal, fz: dReal)
     -> ();
    pub fn dBodyAddRelTorque(arg1: dBodyID, fx: dReal, fy: dReal, fz: dReal)
     -> ();
    pub fn dBodyAddForceAtPos(arg1: dBodyID, fx: dReal, fy: dReal, fz: dReal,
                              px: dReal, py: dReal, pz: dReal) -> ();
    pub fn dBodyAddForceAtRelPos(arg1: dBodyID, fx: dReal, fy: dReal,
                                 fz: dReal, px: dReal, py: dReal, pz: dReal)
     -> ();
    pub fn dBodyAddRelForceAtPos(arg1: dBodyID, fx: dReal, fy: dReal,
                                 fz: dReal, px: dReal, py: dReal, pz: dReal)
     -> ();
    pub fn dBodyAddRelForceAtRelPos(arg1: dBodyID, fx: dReal, fy: dReal,
                                    fz: dReal, px: dReal, py: dReal,
                                    pz: dReal) -> ();
    pub fn dBodyGetForce(arg1: dBodyID) -> *const dReal;
    pub fn dBodyGetTorque(arg1: dBodyID) -> *const dReal;
    pub fn dBodySetForce(b: dBodyID, x: dReal, y: dReal, z: dReal) -> ();
    pub fn dBodySetTorque(b: dBodyID, x: dReal, y: dReal, z: dReal) -> ();
    pub fn dBodyGetRelPointPos(arg1: dBodyID, px: dReal, py: dReal, pz: dReal,
                               result: dVector3) -> ();
    pub fn dBodyGetRelPointVel(arg1: dBodyID, px: dReal, py: dReal, pz: dReal,
                               result: dVector3) -> ();
    pub fn dBodyGetPointVel(arg1: dBodyID, px: dReal, py: dReal, pz: dReal,
                            result: dVector3) -> ();
    pub fn dBodyGetPosRelPoint(arg1: dBodyID, px: dReal, py: dReal, pz: dReal,
                               result: dVector3) -> ();
    pub fn dBodyVectorToWorld(arg1: dBodyID, px: dReal, py: dReal, pz: dReal,
                              result: dVector3) -> ();
    pub fn dBodyVectorFromWorld(arg1: dBodyID, px: dReal, py: dReal,
                                pz: dReal, result: dVector3) -> ();
    pub fn dBodySetFiniteRotationMode(arg1: dBodyID, mode: ::libc::c_int)
     -> ();
    pub fn dBodySetFiniteRotationAxis(arg1: dBodyID, x: dReal, y: dReal,
                                      z: dReal) -> ();
    pub fn dBodyGetFiniteRotationMode(arg1: dBodyID) -> ::libc::c_int;
    pub fn dBodyGetFiniteRotationAxis(arg1: dBodyID, result: dVector3) -> ();
    pub fn dBodyGetNumJoints(b: dBodyID) -> ::libc::c_int;
    pub fn dBodyGetJoint(arg1: dBodyID, index: ::libc::c_int) -> dJointID;
    pub fn dBodySetDynamic(arg1: dBodyID) -> ();
    pub fn dBodySetKinematic(arg1: dBodyID) -> ();
    pub fn dBodyIsKinematic(arg1: dBodyID) -> ::libc::c_int;
    pub fn dBodyEnable(arg1: dBodyID) -> ();
    pub fn dBodyDisable(arg1: dBodyID) -> ();
    pub fn dBodyIsEnabled(arg1: dBodyID) -> ::libc::c_int;
    pub fn dBodySetGravityMode(b: dBodyID, mode: ::libc::c_int) -> ();
    pub fn dBodyGetGravityMode(b: dBodyID) -> ::libc::c_int;
    pub fn dBodySetMovedCallback(b: dBodyID,
                                 callback:
                                     ::std::option::Option<extern "C" fn(arg1:
                                                                             dBodyID)
                                                               -> ()>) -> ();
    pub fn dBodyGetFirstGeom(b: dBodyID) -> dGeomID;
    pub fn dBodyGetNextGeom(g: dGeomID) -> dGeomID;
    pub fn dBodySetDampingDefaults(b: dBodyID) -> ();
    pub fn dBodyGetLinearDamping(b: dBodyID) -> dReal;
    pub fn dBodySetLinearDamping(b: dBodyID, scale: dReal) -> ();
    pub fn dBodyGetAngularDamping(b: dBodyID) -> dReal;
    pub fn dBodySetAngularDamping(b: dBodyID, scale: dReal) -> ();
    pub fn dBodySetDamping(b: dBodyID, linear_scale: dReal,
                           angular_scale: dReal) -> ();
    pub fn dBodyGetLinearDampingThreshold(b: dBodyID) -> dReal;
    pub fn dBodySetLinearDampingThreshold(b: dBodyID, threshold: dReal) -> ();
    pub fn dBodyGetAngularDampingThreshold(b: dBodyID) -> dReal;
    pub fn dBodySetAngularDampingThreshold(b: dBodyID, threshold: dReal)
     -> ();
    pub fn dBodyGetMaxAngularSpeed(b: dBodyID) -> dReal;
    pub fn dBodySetMaxAngularSpeed(b: dBodyID, max_speed: dReal) -> ();
    pub fn dBodyGetGyroscopicMode(b: dBodyID) -> ::libc::c_int;
    pub fn dBodySetGyroscopicMode(b: dBodyID, enabled: ::libc::c_int) -> ();
    pub fn dJointCreateBall(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
    pub fn dJointCreateHinge(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
    pub fn dJointCreateSlider(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointCreateContact(arg1: dWorldID, arg2: dJointGroupID,
                               arg3: *const dContact) -> dJointID;
    pub fn dJointCreateHinge2(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointCreateUniversal(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointCreatePR(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
    pub fn dJointCreatePU(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
    pub fn dJointCreatePiston(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointCreateFixed(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
    pub fn dJointCreateNull(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
    pub fn dJointCreateAMotor(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointCreateLMotor(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointCreatePlane2D(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointCreateDBall(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
    pub fn dJointCreateDHinge(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointCreateTransmission(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointDestroy(arg1: dJointID) -> ();
    pub fn dJointGroupCreate(max_size: ::libc::c_int) -> dJointGroupID;
    pub fn dJointGroupDestroy(arg1: dJointGroupID) -> ();
    pub fn dJointGroupEmpty(arg1: dJointGroupID) -> ();
    pub fn dJointGetNumBodies(arg1: dJointID) -> ::libc::c_int;
    pub fn dJointAttach(arg1: dJointID, body1: dBodyID, body2: dBodyID) -> ();
    pub fn dJointEnable(arg1: dJointID) -> ();
    pub fn dJointDisable(arg1: dJointID) -> ();
    pub fn dJointIsEnabled(arg1: dJointID) -> ::libc::c_int;
    pub fn dJointSetData(arg1: dJointID, data: *mut ::libc::c_void) -> ();
    pub fn dJointGetData(arg1: dJointID) -> *mut ::libc::c_void;
    pub fn dJointGetType(arg1: dJointID) -> dJointType;
    pub fn dJointGetBody(arg1: dJointID, index: ::libc::c_int) -> dBodyID;
    pub fn dJointSetFeedback(arg1: dJointID, arg2: *mut dJointFeedback) -> ();
    pub fn dJointGetFeedback(arg1: dJointID) -> *mut dJointFeedback;
    pub fn dJointSetBallAnchor(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetBallAnchor2(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetBallParam(arg1: dJointID, parameter: ::libc::c_int,
                              value: dReal) -> ();
    pub fn dJointSetHingeAnchor(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetHingeAnchorDelta(arg1: dJointID, x: dReal, y: dReal,
                                     z: dReal, ax: dReal, ay: dReal,
                                     az: dReal) -> ();
    pub fn dJointSetHingeAxis(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetHingeAxisOffset(j: dJointID, x: dReal, y: dReal, z: dReal,
                                    angle: dReal) -> ();
    pub fn dJointSetHingeParam(arg1: dJointID, parameter: ::libc::c_int,
                               value: dReal) -> ();
    pub fn dJointAddHingeTorque(joint: dJointID, torque: dReal) -> ();
    pub fn dJointSetSliderAxis(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetSliderAxisDelta(arg1: dJointID, x: dReal, y: dReal,
                                    z: dReal, ax: dReal, ay: dReal, az: dReal)
     -> ();
    pub fn dJointSetSliderParam(arg1: dJointID, parameter: ::libc::c_int,
                                value: dReal) -> ();
    pub fn dJointAddSliderForce(joint: dJointID, force: dReal) -> ();
    pub fn dJointSetHinge2Anchor(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetHinge2Axis1(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetHinge2Axis2(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetHinge2Param(arg1: dJointID, parameter: ::libc::c_int,
                                value: dReal) -> ();
    pub fn dJointAddHinge2Torques(joint: dJointID, torque1: dReal,
                                  torque2: dReal) -> ();
    pub fn dJointSetUniversalAnchor(arg1: dJointID, x: dReal, y: dReal,
                                    z: dReal) -> ();
    pub fn dJointSetUniversalAxis1(arg1: dJointID, x: dReal, y: dReal,
                                   z: dReal) -> ();
    pub fn dJointSetUniversalAxis1Offset(arg1: dJointID, x: dReal, y: dReal,
                                         z: dReal, offset1: dReal,
                                         offset2: dReal) -> ();
    pub fn dJointSetUniversalAxis2(arg1: dJointID, x: dReal, y: dReal,
                                   z: dReal) -> ();
    pub fn dJointSetUniversalAxis2Offset(arg1: dJointID, x: dReal, y: dReal,
                                         z: dReal, offset1: dReal,
                                         offset2: dReal) -> ();
    pub fn dJointSetUniversalParam(arg1: dJointID, parameter: ::libc::c_int,
                                   value: dReal) -> ();
    pub fn dJointAddUniversalTorques(joint: dJointID, torque1: dReal,
                                     torque2: dReal) -> ();
    pub fn dJointSetPRAnchor(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPRAxis1(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPRAxis2(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPRParam(arg1: dJointID, parameter: ::libc::c_int,
                            value: dReal) -> ();
    pub fn dJointAddPRTorque(j: dJointID, torque: dReal) -> ();
    pub fn dJointSetPUAnchor(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPUAnchorDelta(arg1: dJointID, x: dReal, y: dReal,
                                  z: dReal, dx: dReal, dy: dReal, dz: dReal)
     -> ();
    pub fn dJointSetPUAnchorOffset(arg1: dJointID, x: dReal, y: dReal,
                                   z: dReal, dx: dReal, dy: dReal, dz: dReal)
     -> ();
    pub fn dJointSetPUAxis1(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPUAxis2(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPUAxis3(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPUAxisP(id: dJointID, x: dReal, y: dReal, z: dReal) -> ();
    pub fn dJointSetPUParam(arg1: dJointID, parameter: ::libc::c_int,
                            value: dReal) -> ();
    pub fn dJointAddPUTorque(j: dJointID, torque: dReal) -> ();
    pub fn dJointSetPistonAnchor(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPistonAnchorOffset(j: dJointID, x: dReal, y: dReal,
                                       z: dReal, dx: dReal, dy: dReal,
                                       dz: dReal) -> ();
    pub fn dJointSetPistonAxis(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPistonAxisDelta(j: dJointID, x: dReal, y: dReal, z: dReal,
                                    ax: dReal, ay: dReal, az: dReal) -> ();
    pub fn dJointSetPistonParam(arg1: dJointID, parameter: ::libc::c_int,
                                value: dReal) -> ();
    pub fn dJointAddPistonForce(joint: dJointID, force: dReal) -> ();
    pub fn dJointSetFixed(arg1: dJointID) -> ();
    pub fn dJointSetFixedParam(arg1: dJointID, parameter: ::libc::c_int,
                               value: dReal) -> ();
    pub fn dJointSetAMotorNumAxes(arg1: dJointID, num: ::libc::c_int) -> ();
    pub fn dJointSetAMotorAxis(arg1: dJointID, anum: ::libc::c_int,
                               rel: ::libc::c_int, x: dReal, y: dReal,
                               z: dReal) -> ();
    pub fn dJointSetAMotorAngle(arg1: dJointID, anum: ::libc::c_int,
                                angle: dReal) -> ();
    pub fn dJointSetAMotorParam(arg1: dJointID, parameter: ::libc::c_int,
                                value: dReal) -> ();
    pub fn dJointSetAMotorMode(arg1: dJointID, mode: ::libc::c_int) -> ();
    pub fn dJointAddAMotorTorques(arg1: dJointID, torque1: dReal,
                                  torque2: dReal, torque3: dReal) -> ();
    pub fn dJointSetLMotorNumAxes(arg1: dJointID, num: ::libc::c_int) -> ();
    pub fn dJointSetLMotorAxis(arg1: dJointID, anum: ::libc::c_int,
                               rel: ::libc::c_int, x: dReal, y: dReal,
                               z: dReal) -> ();
    pub fn dJointSetLMotorParam(arg1: dJointID, parameter: ::libc::c_int,
                                value: dReal) -> ();
    pub fn dJointSetPlane2DXParam(arg1: dJointID, parameter: ::libc::c_int,
                                  value: dReal) -> ();
    pub fn dJointSetPlane2DYParam(arg1: dJointID, parameter: ::libc::c_int,
                                  value: dReal) -> ();
    pub fn dJointSetPlane2DAngleParam(arg1: dJointID,
                                      parameter: ::libc::c_int, value: dReal)
     -> ();
    pub fn dJointGetBallAnchor(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetBallAnchor2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetBallParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetHingeAnchor(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetHingeAnchor2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetHingeAxis(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetHingeParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetHingeAngle(arg1: dJointID) -> dReal;
    pub fn dJointGetHingeAngleRate(arg1: dJointID) -> dReal;
    pub fn dJointGetSliderPosition(arg1: dJointID) -> dReal;
    pub fn dJointGetSliderPositionRate(arg1: dJointID) -> dReal;
    pub fn dJointGetSliderAxis(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetSliderParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetHinge2Anchor(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetHinge2Anchor2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetHinge2Axis1(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetHinge2Axis2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetHinge2Param(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetHinge2Angle1(arg1: dJointID) -> dReal;
    pub fn dJointGetHinge2Angle1Rate(arg1: dJointID) -> dReal;
    pub fn dJointGetHinge2Angle2Rate(arg1: dJointID) -> dReal;
    pub fn dJointGetUniversalAnchor(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetUniversalAnchor2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetUniversalAxis1(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetUniversalAxis2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetUniversalParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetUniversalAngles(arg1: dJointID, angle1: *mut dReal,
                                    angle2: *mut dReal) -> ();
    pub fn dJointGetUniversalAngle1(arg1: dJointID) -> dReal;
    pub fn dJointGetUniversalAngle2(arg1: dJointID) -> dReal;
    pub fn dJointGetUniversalAngle1Rate(arg1: dJointID) -> dReal;
    pub fn dJointGetUniversalAngle2Rate(arg1: dJointID) -> dReal;
    pub fn dJointGetPRAnchor(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPRPosition(arg1: dJointID) -> dReal;
    pub fn dJointGetPRPositionRate(arg1: dJointID) -> dReal;
    pub fn dJointGetPRAngle(arg1: dJointID) -> dReal;
    pub fn dJointGetPRAngleRate(arg1: dJointID) -> dReal;
    pub fn dJointGetPRAxis1(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPRAxis2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPRParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetPUAnchor(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPUPosition(arg1: dJointID) -> dReal;
    pub fn dJointGetPUPositionRate(arg1: dJointID) -> dReal;
    pub fn dJointGetPUAxis1(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPUAxis2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPUAxis3(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPUAxisP(id: dJointID, result: dVector3) -> ();
    pub fn dJointGetPUAngles(arg1: dJointID, angle1: *mut dReal,
                             angle2: *mut dReal) -> ();
    pub fn dJointGetPUAngle1(arg1: dJointID) -> dReal;
    pub fn dJointGetPUAngle1Rate(arg1: dJointID) -> dReal;
    pub fn dJointGetPUAngle2(arg1: dJointID) -> dReal;
    pub fn dJointGetPUAngle2Rate(arg1: dJointID) -> dReal;
    pub fn dJointGetPUParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetPistonPosition(arg1: dJointID) -> dReal;
    pub fn dJointGetPistonPositionRate(arg1: dJointID) -> dReal;
    pub fn dJointGetPistonAngle(arg1: dJointID) -> dReal;
    pub fn dJointGetPistonAngleRate(arg1: dJointID) -> dReal;
    pub fn dJointGetPistonAnchor(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPistonAnchor2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPistonAxis(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPistonParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetAMotorNumAxes(arg1: dJointID) -> ::libc::c_int;
    pub fn dJointGetAMotorAxis(arg1: dJointID, anum: ::libc::c_int,
                               result: dVector3) -> ();
    pub fn dJointGetAMotorAxisRel(arg1: dJointID, anum: ::libc::c_int)
     -> ::libc::c_int;
    pub fn dJointGetAMotorAngle(arg1: dJointID, anum: ::libc::c_int) -> dReal;
    pub fn dJointGetAMotorAngleRate(arg1: dJointID, anum: ::libc::c_int)
     -> dReal;
    pub fn dJointGetAMotorParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetAMotorMode(arg1: dJointID) -> ::libc::c_int;
    pub fn dJointGetLMotorNumAxes(arg1: dJointID) -> ::libc::c_int;
    pub fn dJointGetLMotorAxis(arg1: dJointID, anum: ::libc::c_int,
                               result: dVector3) -> ();
    pub fn dJointGetLMotorParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetFixedParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetTransmissionContactPoint1(arg1: dJointID,
                                              result: dVector3) -> ();
    pub fn dJointGetTransmissionContactPoint2(arg1: dJointID,
                                              result: dVector3) -> ();
    pub fn dJointSetTransmissionAxis1(arg1: dJointID, x: dReal, y: dReal,
                                      z: dReal) -> ();
    pub fn dJointGetTransmissionAxis1(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointSetTransmissionAxis2(arg1: dJointID, x: dReal, y: dReal,
                                      z: dReal) -> ();
    pub fn dJointGetTransmissionAxis2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointSetTransmissionAnchor1(arg1: dJointID, x: dReal, y: dReal,
                                        z: dReal) -> ();
    pub fn dJointGetTransmissionAnchor1(arg1: dJointID, result: dVector3)
     -> ();
    pub fn dJointSetTransmissionAnchor2(arg1: dJointID, x: dReal, y: dReal,
                                        z: dReal) -> ();
    pub fn dJointGetTransmissionAnchor2(arg1: dJointID, result: dVector3)
     -> ();
    pub fn dJointSetTransmissionParam(arg1: dJointID,
                                      parameter: ::libc::c_int, value: dReal)
     -> ();
    pub fn dJointGetTransmissionParam(arg1: dJointID,
                                      parameter: ::libc::c_int) -> dReal;
    pub fn dJointSetTransmissionMode(j: dJointID, mode: ::libc::c_int) -> ();
    pub fn dJointGetTransmissionMode(j: dJointID) -> ::libc::c_int;
    pub fn dJointSetTransmissionRatio(j: dJointID, ratio: dReal) -> ();
    pub fn dJointGetTransmissionRatio(j: dJointID) -> dReal;
    pub fn dJointSetTransmissionAxis(j: dJointID, x: dReal, y: dReal,
                                     z: dReal) -> ();
    pub fn dJointGetTransmissionAxis(j: dJointID, result: dVector3) -> ();
    pub fn dJointGetTransmissionAngle1(j: dJointID) -> dReal;
    pub fn dJointGetTransmissionAngle2(j: dJointID) -> dReal;
    pub fn dJointGetTransmissionRadius1(j: dJointID) -> dReal;
    pub fn dJointGetTransmissionRadius2(j: dJointID) -> dReal;
    pub fn dJointSetTransmissionRadius1(j: dJointID, radius: dReal) -> ();
    pub fn dJointSetTransmissionRadius2(j: dJointID, radius: dReal) -> ();
    pub fn dJointGetTransmissionBacklash(j: dJointID) -> dReal;
    pub fn dJointSetTransmissionBacklash(j: dJointID, backlash: dReal) -> ();
    pub fn dJointSetDBallAnchor1(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetDBallAnchor2(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointGetDBallAnchor1(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetDBallAnchor2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetDBallDistance(arg1: dJointID) -> dReal;
    pub fn dJointSetDBallParam(arg1: dJointID, parameter: ::libc::c_int,
                               value: dReal) -> ();
    pub fn dJointGetDBallParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointSetDHingeAxis(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointGetDHingeAxis(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointSetDHingeAnchor1(arg1: dJointID, x: dReal, y: dReal,
                                  z: dReal) -> ();
    pub fn dJointSetDHingeAnchor2(arg1: dJointID, x: dReal, y: dReal,
                                  z: dReal) -> ();
    pub fn dJointGetDHingeAnchor1(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetDHingeAnchor2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetDHingeDistance(arg1: dJointID) -> dReal;
    pub fn dJointSetDHingeParam(arg1: dJointID, parameter: ::libc::c_int,
                                value: dReal) -> ();
    pub fn dJointGetDHingeParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dConnectingJoint(arg1: dBodyID, arg2: dBodyID) -> dJointID;
    pub fn dConnectingJointList(arg1: dBodyID, arg2: dBodyID,
                                arg3: *mut dJointID) -> ::libc::c_int;
    pub fn dAreConnected(arg1: dBodyID, arg2: dBodyID) -> ::libc::c_int;
    pub fn dAreConnectedExcluding(body1: dBodyID, body2: dBodyID,
                                  joint_type: ::libc::c_int) -> ::libc::c_int;
}
