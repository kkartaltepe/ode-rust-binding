/* automatically generated by rust-bindgen */

use common::*;
use collision_space::*;
use contact::*;

pub type Enum_Unnamed1 = ::libc::c_uint;
pub const dGeomCommonControlClass: ::libc::c_uint = 0;
pub const dGeomColliderControlClass: ::libc::c_uint = 1;
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const dGeomCommonAnyControlCode: ::libc::c_uint = 0;
pub const dGeomColliderSetMergeSphereContactsControlCode: ::libc::c_uint = 1;
pub const dGeomColliderGetMergeSphereContactsControlCode: ::libc::c_uint = 2;
pub type Enum_Unnamed3 = ::libc::c_uint;
pub const dGeomColliderMergeContactsValue__Default: ::libc::c_uint = 0;
pub const dGeomColliderMergeContactsValue_None: ::libc::c_uint = 1;
pub const dGeomColliderMergeContactsValue_Normals: ::libc::c_uint = 2;
pub const dGeomColliderMergeContactsValue_Full: ::libc::c_uint = 3;
pub type Enum_Unnamed4 = ::libc::c_uint;
pub const dMaxUserClasses: ::libc::c_uint = 4;
pub type Enum_Unnamed5 = ::libc::c_uint;
pub const dSphereClass: ::libc::c_uint = 0;
pub const dBoxClass: ::libc::c_uint = 1;
pub const dCapsuleClass: ::libc::c_uint = 2;
pub const dCylinderClass: ::libc::c_uint = 3;
pub const dPlaneClass: ::libc::c_uint = 4;
pub const dRayClass: ::libc::c_uint = 5;
pub const dConvexClass: ::libc::c_uint = 6;
pub const dGeomTransformClass: ::libc::c_uint = 7;
pub const dTriMeshClass: ::libc::c_uint = 8;
pub const dHeightfieldClass: ::libc::c_uint = 9;
pub const dFirstSpaceClass: ::libc::c_uint = 10;
pub const dSimpleSpaceClass: ::libc::c_uint = 10;
pub const dHashSpaceClass: ::libc::c_uint = 11;
pub const dSweepAndPruneSpaceClass: ::libc::c_uint = 12;
pub const dQuadTreeSpaceClass: ::libc::c_uint = 13;
pub const dLastSpaceClass: ::libc::c_uint = 13;
pub const dFirstUserClass: ::libc::c_uint = 14;
pub const dLastUserClass: ::libc::c_uint = 17;
pub const dGeomNumClasses: ::libc::c_uint = 18;
pub enum Struct_dxHeightfieldData { }
pub type dHeightfieldDataID = *mut Struct_dxHeightfieldData;
pub type dHeightfieldGetHeight =
    extern "C" fn(p_user_data: *mut ::libc::c_void, x: ::libc::c_int,
                  z: ::libc::c_int) -> dReal;
pub type dGetAABBFn = extern "C" fn(arg1: dGeomID, aabb: *mut dReal) -> ();
pub type dColliderFn =
    extern "C" fn(o1: dGeomID, o2: dGeomID, flags: ::libc::c_int,
                  contact: *mut dContactGeom, skip: ::libc::c_int)
        -> ::libc::c_int;
pub type dGetColliderFnFn =
    extern "C" fn(num: ::libc::c_int)
        ->
            *mut ::std::option::Option<extern "C" fn(num: ::libc::c_int)
                                           -> ::libc::c_int>;
pub type dGeomDtorFn = extern "C" fn(o: dGeomID) -> ();
pub type dAABBTestFn =
    extern "C" fn(o1: dGeomID, o2: dGeomID, aabb: *mut dReal)
        -> ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dGeomClass {
    pub bytes: ::libc::c_int,
    pub collider: *mut ::std::option::Option<extern "C" fn()
                                                 ->
                                                     *mut ::std::option::Option<extern "C" fn()
                                                                                    ->
                                                                                        ::libc::c_int>>,
    pub aabb: *mut ::std::option::Option<extern "C" fn() -> ()>,
    pub aabb_test: *mut ::std::option::Option<extern "C" fn()
                                                  -> ::libc::c_int>,
    pub dtor: *mut ::std::option::Option<extern "C" fn() -> ()>,
}
impl ::std::clone::Clone for Struct_dGeomClass {
    fn clone(&self) -> Struct_dGeomClass { *self }
}
impl ::std::default::Default for Struct_dGeomClass {
    fn default() -> Struct_dGeomClass { unsafe { ::std::mem::zeroed() } }
}
pub type dGeomClass = Struct_dGeomClass;

#[link(name="ode")]
extern "C" {
    pub fn dGeomDestroy(geom: dGeomID) -> ();
    pub fn dGeomSetData(geom: dGeomID, data: *mut ::libc::c_void) -> ();
    pub fn dGeomGetData(geom: dGeomID) -> *mut ::libc::c_void;
    pub fn dGeomSetBody(geom: dGeomID, body: dBodyID) -> ();
    pub fn dGeomGetBody(geom: dGeomID) -> dBodyID;
    pub fn dGeomSetPosition(geom: dGeomID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dGeomSetRotation(geom: dGeomID, R: dMatrix3) -> ();
    pub fn dGeomSetQuaternion(geom: dGeomID, Q: dQuaternion) -> ();
    pub fn dGeomGetPosition(geom: dGeomID) -> *const dReal;
    pub fn dGeomCopyPosition(geom: dGeomID, pos: dVector3) -> ();
    pub fn dGeomGetRotation(geom: dGeomID) -> *const dReal;
    pub fn dGeomCopyRotation(geom: dGeomID, R: dMatrix3) -> ();
    pub fn dGeomGetQuaternion(geom: dGeomID, result: dQuaternion) -> ();
    pub fn dGeomGetAABB(geom: dGeomID, aabb: *mut dReal) -> ();
    pub fn dGeomIsSpace(geom: dGeomID) -> ::libc::c_int;
    pub fn dGeomGetSpace(arg1: dGeomID) -> dSpaceID;
    pub fn dGeomGetClass(geom: dGeomID) -> ::libc::c_int;
    pub fn dGeomSetCategoryBits(geom: dGeomID, bits: ::libc::c_ulong) -> ();
    pub fn dGeomSetCollideBits(geom: dGeomID, bits: ::libc::c_ulong) -> ();
    pub fn dGeomGetCategoryBits(arg1: dGeomID) -> ::libc::c_ulong;
    pub fn dGeomGetCollideBits(arg1: dGeomID) -> ::libc::c_ulong;
    pub fn dGeomEnable(geom: dGeomID) -> ();
    pub fn dGeomDisable(geom: dGeomID) -> ();
    pub fn dGeomIsEnabled(geom: dGeomID) -> ::libc::c_int;
    pub fn dGeomLowLevelControl(geom: dGeomID, controlClass: ::libc::c_int,
                                controlCode: ::libc::c_int,
                                dataValue: *mut ::libc::c_void,
                                dataSize: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn dGeomGetRelPointPos(geom: dGeomID, px: dReal, py: dReal, pz: dReal,
                               result: dVector3) -> ();
    pub fn dGeomGetPosRelPoint(geom: dGeomID, px: dReal, py: dReal, pz: dReal,
                               result: dVector3) -> ();
    pub fn dGeomVectorToWorld(geom: dGeomID, px: dReal, py: dReal, pz: dReal,
                              result: dVector3) -> ();
    pub fn dGeomVectorFromWorld(geom: dGeomID, px: dReal, py: dReal,
                                pz: dReal, result: dVector3) -> ();
    pub fn dGeomSetOffsetPosition(geom: dGeomID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dGeomSetOffsetRotation(geom: dGeomID, R: dMatrix3) -> ();
    pub fn dGeomSetOffsetQuaternion(geom: dGeomID, Q: dQuaternion) -> ();
    pub fn dGeomSetOffsetWorldPosition(geom: dGeomID, x: dReal, y: dReal,
                                       z: dReal) -> ();
    pub fn dGeomSetOffsetWorldRotation(geom: dGeomID, R: dMatrix3) -> ();
    pub fn dGeomSetOffsetWorldQuaternion(geom: dGeomID, arg1: dQuaternion)
     -> ();
    pub fn dGeomClearOffset(geom: dGeomID) -> ();
    pub fn dGeomIsOffset(geom: dGeomID) -> ::libc::c_int;
    pub fn dGeomGetOffsetPosition(geom: dGeomID) -> *const dReal;
    pub fn dGeomCopyOffsetPosition(geom: dGeomID, pos: dVector3) -> ();
    pub fn dGeomGetOffsetRotation(geom: dGeomID) -> *const dReal;
    pub fn dGeomCopyOffsetRotation(geom: dGeomID, R: dMatrix3) -> ();
    pub fn dGeomGetOffsetQuaternion(geom: dGeomID, result: dQuaternion) -> ();
    pub fn dCollide(o1: dGeomID, o2: dGeomID, flags: ::libc::c_int,
                    contact: *mut dContactGeom, skip: ::libc::c_int)
     -> ::libc::c_int;
    pub fn dSpaceCollide(space: dSpaceID, data: *mut ::libc::c_void,
                         callback:
                             *mut ::std::option::Option<extern "C" fn()
                                                            -> ()>) -> ();
    pub fn dSpaceCollide2(space1: dGeomID, space2: dGeomID,
                          data: *mut ::libc::c_void,
                          callback:
                              *mut ::std::option::Option<extern "C" fn()
                                                             -> ()>) -> ();
    pub fn dCreateSphere(space: dSpaceID, radius: dReal) -> dGeomID;
    pub fn dGeomSphereSetRadius(sphere: dGeomID, radius: dReal) -> ();
    pub fn dGeomSphereGetRadius(sphere: dGeomID) -> dReal;
    pub fn dGeomSpherePointDepth(sphere: dGeomID, x: dReal, y: dReal,
                                 z: dReal) -> dReal;
    pub fn dCreateConvex(space: dSpaceID, _planes: *mut dReal,
                         _planecount: ::libc::c_uint, _points: *mut dReal,
                         _pointcount: ::libc::c_uint,
                         _polygons: *mut ::libc::c_uint) -> dGeomID;
    pub fn dGeomSetConvex(g: dGeomID, _planes: *mut dReal,
                          _count: ::libc::c_uint, _points: *mut dReal,
                          _pointcount: ::libc::c_uint,
                          _polygons: *mut ::libc::c_uint) -> ();
    pub fn dCreateBox(space: dSpaceID, lx: dReal, ly: dReal, lz: dReal)
     -> dGeomID;
    pub fn dGeomBoxSetLengths(_box: dGeomID, lx: dReal, ly: dReal, lz: dReal)
     -> ();
    pub fn dGeomBoxGetLengths(_box: dGeomID, result: dVector3) -> ();
    pub fn dGeomBoxPointDepth(_box: dGeomID, x: dReal, y: dReal, z: dReal)
     -> dReal;
    pub fn dCreatePlane(space: dSpaceID, a: dReal, b: dReal, c: dReal,
                        d: dReal) -> dGeomID;
    pub fn dGeomPlaneSetParams(plane: dGeomID, a: dReal, b: dReal, c: dReal,
                               d: dReal) -> ();
    pub fn dGeomPlaneGetParams(plane: dGeomID, result: dVector4) -> ();
    pub fn dGeomPlanePointDepth(plane: dGeomID, x: dReal, y: dReal, z: dReal)
     -> dReal;
    pub fn dCreateCapsule(space: dSpaceID, radius: dReal, length: dReal)
     -> dGeomID;
    pub fn dGeomCapsuleSetParams(ccylinder: dGeomID, radius: dReal,
                                 length: dReal) -> ();
    pub fn dGeomCapsuleGetParams(ccylinder: dGeomID, radius: *mut dReal,
                                 length: *mut dReal) -> ();
    pub fn dGeomCapsulePointDepth(ccylinder: dGeomID, x: dReal, y: dReal,
                                  z: dReal) -> dReal;
    pub fn dCreateCylinder(space: dSpaceID, radius: dReal, length: dReal)
     -> dGeomID;
    pub fn dGeomCylinderSetParams(cylinder: dGeomID, radius: dReal,
                                  length: dReal) -> ();
    pub fn dGeomCylinderGetParams(cylinder: dGeomID, radius: *mut dReal,
                                  length: *mut dReal) -> ();
    pub fn dCreateRay(space: dSpaceID, length: dReal) -> dGeomID;
    pub fn dGeomRaySetLength(ray: dGeomID, length: dReal) -> ();
    pub fn dGeomRayGetLength(ray: dGeomID) -> dReal;
    pub fn dGeomRaySet(ray: dGeomID, px: dReal, py: dReal, pz: dReal,
                       dx: dReal, dy: dReal, dz: dReal) -> ();
    pub fn dGeomRayGet(ray: dGeomID, start: dVector3, dir: dVector3) -> ();
    pub fn dGeomRaySetParams(g: dGeomID, FirstContact: ::libc::c_int,
                             BackfaceCull: ::libc::c_int) -> ();
    pub fn dGeomRayGetParams(g: dGeomID, FirstContact: *mut ::libc::c_int,
                             BackfaceCull: *mut ::libc::c_int) -> ();
    pub fn dGeomRaySetClosestHit(g: dGeomID, closestHit: ::libc::c_int) -> ();
    pub fn dGeomRayGetClosestHit(g: dGeomID) -> ::libc::c_int;
    pub fn dCreateGeomTransform(space: dSpaceID) -> dGeomID;
    pub fn dGeomTransformSetGeom(g: dGeomID, obj: dGeomID) -> ();
    pub fn dGeomTransformGetGeom(g: dGeomID) -> dGeomID;
    pub fn dGeomTransformSetCleanup(g: dGeomID, mode: ::libc::c_int) -> ();
    pub fn dGeomTransformGetCleanup(g: dGeomID) -> ::libc::c_int;
    pub fn dGeomTransformSetInfo(g: dGeomID, mode: ::libc::c_int) -> ();
    pub fn dGeomTransformGetInfo(g: dGeomID) -> ::libc::c_int;
    pub fn dCreateHeightfield(space: dSpaceID, data: dHeightfieldDataID,
                              bPlaceable: ::libc::c_int) -> dGeomID;
    pub fn dGeomHeightfieldDataCreate() -> dHeightfieldDataID;
    pub fn dGeomHeightfieldDataDestroy(d: dHeightfieldDataID) -> ();
    pub fn dGeomHeightfieldDataBuildCallback(d: dHeightfieldDataID,
                                             pUserData: *mut ::libc::c_void,
                                             pCallback:
                                                 *mut ::std::option::Option<extern "C" fn()
                                                                                ->
                                                                                    dReal>,
                                             width: dReal, depth: dReal,
                                             widthSamples: ::libc::c_int,
                                             depthSamples: ::libc::c_int,
                                             scale: dReal, offset: dReal,
                                             thickness: dReal,
                                             bWrap: ::libc::c_int) -> ();
    pub fn dGeomHeightfieldDataBuildByte(d: dHeightfieldDataID,
                                         pHeightData: *const ::libc::c_uchar,
                                         bCopyHeightData: ::libc::c_int,
                                         width: dReal, depth: dReal,
                                         widthSamples: ::libc::c_int,
                                         depthSamples: ::libc::c_int,
                                         scale: dReal, offset: dReal,
                                         thickness: dReal,
                                         bWrap: ::libc::c_int) -> ();
    pub fn dGeomHeightfieldDataBuildShort(d: dHeightfieldDataID,
                                          pHeightData: *const ::libc::c_short,
                                          bCopyHeightData: ::libc::c_int,
                                          width: dReal, depth: dReal,
                                          widthSamples: ::libc::c_int,
                                          depthSamples: ::libc::c_int,
                                          scale: dReal, offset: dReal,
                                          thickness: dReal,
                                          bWrap: ::libc::c_int) -> ();
    pub fn dGeomHeightfieldDataBuildSingle(d: dHeightfieldDataID,
                                           pHeightData:
                                               *const ::libc::c_float,
                                           bCopyHeightData: ::libc::c_int,
                                           width: dReal, depth: dReal,
                                           widthSamples: ::libc::c_int,
                                           depthSamples: ::libc::c_int,
                                           scale: dReal, offset: dReal,
                                           thickness: dReal,
                                           bWrap: ::libc::c_int) -> ();
    pub fn dGeomHeightfieldDataBuildDouble(d: dHeightfieldDataID,
                                           pHeightData:
                                               *const ::libc::c_double,
                                           bCopyHeightData: ::libc::c_int,
                                           width: dReal, depth: dReal,
                                           widthSamples: ::libc::c_int,
                                           depthSamples: ::libc::c_int,
                                           scale: dReal, offset: dReal,
                                           thickness: dReal,
                                           bWrap: ::libc::c_int) -> ();
    pub fn dGeomHeightfieldDataSetBounds(d: dHeightfieldDataID,
                                         minHeight: dReal, maxHeight: dReal)
     -> ();
    pub fn dGeomHeightfieldSetHeightfieldData(g: dGeomID,
                                              d: dHeightfieldDataID) -> ();
    pub fn dGeomHeightfieldGetHeightfieldData(g: dGeomID)
     -> dHeightfieldDataID;
    pub fn dClosestLineSegmentPoints(a1: dVector3, a2: dVector3, b1: dVector3,
                                     b2: dVector3, cp1: dVector3,
                                     cp2: dVector3) -> ();
    pub fn dBoxTouchesBox(_p1: dVector3, R1: dMatrix3, side1: dVector3,
                          _p2: dVector3, R2: dMatrix3, side2: dVector3)
     -> ::libc::c_int;
    pub fn dBoxBox(p1: dVector3, R1: dMatrix3, side1: dVector3, p2: dVector3,
                   R2: dMatrix3, side2: dVector3, normal: dVector3,
                   depth: *mut dReal, return_code: *mut ::libc::c_int,
                   flags: ::libc::c_int, contact: *mut dContactGeom,
                   skip: ::libc::c_int) -> ::libc::c_int;
    pub fn dInfiniteAABB(geom: dGeomID, aabb: *mut dReal) -> ();
    pub fn dCreateGeomClass(classptr: *const dGeomClass) -> ::libc::c_int;
    pub fn dGeomGetClassData(arg1: dGeomID) -> *mut ::libc::c_void;
    pub fn dCreateGeom(classnum: ::libc::c_int) -> dGeomID;
    pub fn dSetColliderOverride(i: ::libc::c_int, j: ::libc::c_int,
                                _fn:
                                    *mut ::std::option::Option<extern "C" fn()
                                                                   ->
                                                                       ::libc::c_int>)
     -> ();
}
