/* automatically generated by rust-bindgen */

use common::*;

pub type dMass = Struct_dMass;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dMass {
    pub mass: dReal,
    pub c: dVector3,
    pub I: dMatrix3,
}
impl ::std::clone::Clone for Struct_dMass {
    fn clone(&self) -> Struct_dMass { *self }
}
impl ::std::default::Default for Struct_dMass {
    fn default() -> Struct_dMass { unsafe { ::std::mem::zeroed() } }
}

#[link(name="ode")]
extern "C" {
    pub fn dMassCheck(m: *const dMass) -> ::libc::c_int;
    pub fn dMassSetZero(arg1: *mut dMass) -> ();
    pub fn dMassSetParameters(arg1: *mut dMass, themass: dReal, cgx: dReal,
                              cgy: dReal, cgz: dReal, I11: dReal, I22: dReal,
                              I33: dReal, I12: dReal, I13: dReal, I23: dReal)
     -> ();
    pub fn dMassSetSphere(arg1: *mut dMass, density: dReal, radius: dReal)
     -> ();
    pub fn dMassSetSphereTotal(arg1: *mut dMass, total_mass: dReal,
                               radius: dReal) -> ();
    pub fn dMassSetCapsule(arg1: *mut dMass, density: dReal,
                           direction: ::libc::c_int, radius: dReal,
                           length: dReal) -> ();
    pub fn dMassSetCapsuleTotal(arg1: *mut dMass, total_mass: dReal,
                                direction: ::libc::c_int, radius: dReal,
                                length: dReal) -> ();
    pub fn dMassSetCylinder(arg1: *mut dMass, density: dReal,
                            direction: ::libc::c_int, radius: dReal,
                            length: dReal) -> ();
    pub fn dMassSetCylinderTotal(arg1: *mut dMass, total_mass: dReal,
                                 direction: ::libc::c_int, radius: dReal,
                                 length: dReal) -> ();
    pub fn dMassSetBox(arg1: *mut dMass, density: dReal, lx: dReal, ly: dReal,
                       lz: dReal) -> ();
    pub fn dMassSetBoxTotal(arg1: *mut dMass, total_mass: dReal, lx: dReal,
                            ly: dReal, lz: dReal) -> ();
    pub fn dMassSetTrimesh(arg1: *mut dMass, density: dReal, g: dGeomID)
     -> ();
    pub fn dMassSetTrimeshTotal(m: *mut dMass, total_mass: dReal, g: dGeomID)
     -> ();
    pub fn dMassAdjust(arg1: *mut dMass, newmass: dReal) -> ();
    pub fn dMassTranslate(arg1: *mut dMass, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dMassRotate(arg1: *mut dMass, R: dMatrix3) -> ();
    pub fn dMassAdd(a: *mut dMass, b: *const dMass) -> ();
    pub fn dMassSetCappedCylinder(a: *mut dMass, b: dReal, c: ::libc::c_int,
                                  d: dReal, e: dReal) -> ();
    pub fn dMassSetCappedCylinderTotal(a: *mut dMass, b: dReal,
                                       c: ::libc::c_int, d: dReal, e: dReal)
     -> ();
}
